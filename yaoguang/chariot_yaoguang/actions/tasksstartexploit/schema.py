# GENERATED BY CHARIOT SDK - DO NOT EDIT
import chariot
import json


class Component:
    DESCRIPTION = ""


class Input:
    WORKSPACEID = "workspaceid"
    WHITELISTSTRING = "whiteliststring"
    MINIMUMRANK = "minimumrank"
    BLACKLISTSTRING = "blackliststring"
    PAYLOADTYPE = "payloadtype"
    CONNECTION = "connection"
    PAYLOADPORTS = "payloadports"
    PAYLOADHOST = "payloadhost"
    MACRONAME = "macroname"
    DYNAMICSTAGER = "dynamicstager"
    STAGEENCODEING = "stageencodeing"
    WHITELISTPORTS = "whitelistports"
    BLACKLISTPORTS = "blacklistports"
    FILTERBYOS = "filterbyos"
    FILTERBYPORT = "filterbyport"
    SPEED = "speed"
    TIMEOUT = "timeout"
    EVASIONLEVELTCP = "evasionleveltcp"
    EVASIONLEVELAPP = "evasionlevelapp"
    LIMITSESSIONS = "limitsessions"
    ONLYMATCH = "onlymatch"
    HTTPUSERNAME = "httpusername"
    HTTPPASSWORD = "httppassword"
    HTTPDOMAIN = "httpdomain"
    COOKIE = "cookie"
    USERAGENT = "useragent"
    

class Output:
    STATUSCODE = "statuscode"
    SUCCESS = "success"
    WORKSPACEID = "workspaceid"
    TASKID = "taskid"
    ERRORS = "errors"
    

class TasksstartexploitInput(chariot.Input):
    schema = json.loads("""
   {
	"type": "object",
	"title": "Variables",
	"properties": {
		"blacklistports": {
			"type": "string",
			"title": "",
			"description": "",
			"order": 13
		},
		"blackliststring": {
			"type": "string",
			"title": "排除地址",
			"description": "",
			"order": 4,
			"enum": [
				"low",
				"average",
				"normal",
				"good",
				"great",
				"excellent"
			]
		},
		"connection": {
			"type": "string",
			"title": "连接类型",
			"description": "",
			"order": 6,
			"enum": [
				"Auto",
				"Reverse",
				"Bind"
			]
		},
		"cookie": {
			"type": "string",
			"title": "http Cookie",
			"description": "",
			"order": 25
		},
		"dynamicstager": {
			"type": "string",
			"title": "对EXE载荷启用动态编码(免杀)",
			"description": "",
			"order": 10
		},
		"evasionlevelapp": {
			"type": "string",
			"title": "应用层伪装",
			"description": "",
			"order": 19,
			"enum": [
				"0",
				"1",
				"2",
				"3"
			]
		},
		"evasionleveltcp": {
			"type": "string",
			"title": "传输层伪装",
			"description": "",
			"order": 18,
			"enum": [
				"0",
				"1",
				"2",
				"3"
			]
		},
		"filterbyos": {
			"type": "boolean",
			"title": "",
			"description": "",
			"order": 14
		},
		"filterbyport": {
			"type": "boolean",
			"title": "基于开放端口匹配利用模块",
			"description": "",
			"order": 15
		},
		"httpdomain": {
			"type": "string",
			"title": "http域",
			"description": "",
			"order": 24
		},
		"httppassword": {
			"type": "string",
			"title": "http密码",
			"description": "",
			"order": 23,
			"displayType": "password",
			"format": "password"
		},
		"httpusername": {
			"type": "string",
			"title": "http用户名",
			"description": "",
			"order": 22
		},
		"limitsessions": {
			"type": "boolean",
			"title": "每个目标只建立一个会话",
			"description": "",
			"order": 20
		},
		"macroname": {
			"type": "string",
			"title": "启动后渗透模块",
			"description": "",
			"order": 9
		},
		"minimumrank": {
			"type": "string",
			"title": "自动化测试设置",
			"description": "",
			"order": 3
		},
		"onlymatch": {
			"type": "boolean",
			"title": "预检：只显示利用模块，不运行",
			"description": "",
			"order": 21
		},
		"payloadhost": {
			"type": "string",
			"title": "监听主机",
			"description": "",
			"order": 8
		},
		"payloadports": {
			"type": "string",
			"title": "监听端口(1024-65538)",
			"description": "",
			"order": 7
		},
		"payloadtype": {
			"type": "string",
			"title": "荷载类型",
			"description": "",
			"order": 5,
			"enum": [
				"Meterpreter",
				"Meterpreter 64-bit",
				"Command shell",
				"Powershell"
			]
		},
		"speed": {
			"type": "string",
			"title": "并发",
			"description": "",
			"order": 16
		},
		"stageencodeing": {
			"type": "string",
			"title": "",
			"description": "",
			"order": 11
		},
		"timeout": {
			"type": "string",
			"title": "超时",
			"description": "",
			"order": 17
		},
		"useragent": {
			"type": "string",
			"title": "用户代理",
			"description": "",
			"order": 26
		},
		"whitelistports": {
			"type": "string",
			"title": "",
			"description": "",
			"order": 12
		},
		"whiteliststring": {
			"type": "string",
			"title": "自动渗透配置",
			"description": "",
			"order": 2
		},
		"workspaceid": {
			"type": "string",
			"title": "项目id",
			"description": "",
			"order": 1
		}
	},
	"required": [
		"workspaceid",
		"whiteliststring",
		"minimumrank"
	]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class TasksstartexploitOutput(chariot.Output):
    schema = json.loads("""
   {
	"type": "object",
	"title": "Variables",
	"properties": {
		"errors": {
			"type": "string",
			"title": "错误信息",
			"description": "",
			"order": 5
		},
		"statuscode": {
			"type": "integer",
			"title": "状态码",
			"description": "",
			"order": 1
		},
		"success": {
			"type": "string",
			"title": "结果",
			"description": "",
			"order": 2
		},
		"taskid": {
			"type": "string",
			"title": "任务id",
			"description": "",
			"order": 4
		},
		"workspaceid": {
			"type": "string",
			"title": "项目id",
			"description": "",
			"order": 3
		}
	},
	"required": [
		"statuscode"
	]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
